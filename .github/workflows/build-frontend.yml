name: Build and Deploy Full Stack

on:
  # Only trigger on PR merges to main (not direct pushes)
  pull_request:
    types: [closed]
    branches:
      - 'main'
  # Allow manual triggering
  workflow_dispatch:

jobs:
  deploy:
    # Run when a PR to main is merged or manually triggered
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Clean previous build
        working-directory: ./frontend
        run: rm -rf dist
        
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_BUILD_ID: ${{ github.run_id }}
          VITE_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
        
      - name: Update file timestamps to force upload
        working-directory: ./frontend/dist
        run: find . -type f -exec touch {} \;
        
      - name: Upload build artifacts (for reference)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7
          
      - name: Deploy Frontend via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./frontend/dist/
          server-dir: backend/public/
          # SAFE MODE: Only upload/overwrite frontend files - NEVER deletes anything
          dangerous-clean-slate: false
          dry-run: false
          log-level: verbose
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/uploads/**
            uploads/

      - name: Deploy Backend Code via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./backend/
          server-dir: backend/
          # SAFE MODE: Only upload/overwrite backend files
          dangerous-clean-slate: false
          dry-run: false
          log-level: minimal
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/var/cache/**
            **/var/log/**
            **/uploads/**
            uploads/
            **/.env.local
            **/.env.*.local

      - name: Trigger Backend Deployment Webhook
        run: |
          echo "ðŸ”„ Triggering backend deployment via webhook..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Deploy-Secret: ${{ secrets.DEPLOY_WEBHOOK_SECRET }}" \
            -d '{
              "event": "deployment",
              "repository": "${{ github.repository }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "run_id": "${{ github.run_id }}",
              "timestamp": "${{ github.event.head_commit.timestamp }}"
            }' \
            "https://comics.starbugstone.com/api/deployment/webhook" \
            --max-time 300 \
            --retry 3 \
            --retry-delay 5

      - name: Deployment Status
        run: |
          echo "ðŸŽ‰ Deployment process completed!"
          echo ""
          echo "âœ… Frontend: Deployed via FTP"
          echo "âœ… Backend Code: Deployed via FTP" 
          echo "âœ… Backend Services: Triggered via webhook"
          echo ""
          echo "ðŸ”— Check deployment status at:"
          echo "https://comics.starbugstone.com/api/deployment/status"
          echo "(Note: Status endpoint requires admin authentication)"

      # TODO: Alternative approaches (commented out)
      # Option 2: Use a webhook service like Zapier/IFTTT to trigger deployment
      # Option 3: Use a proxy service with static IP
      # Option 4: Manual deployment documentation
