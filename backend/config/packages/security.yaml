security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User: 'auto' # Changed from Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # users_in_memory: { memory: null } # Old provider
        app_user_provider: # New provider
            entity:
                class: App\Entity\User
                property: email # The field used to look up users
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider # Changed from users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

            # Form login
            # form_login:
            #     # "app_login" is the name of the route created previously
            #     login_path: app_login
            #     check_path: app_login
            #     enable_csrf: true
            
            json_login:
                check_path: /api/login # The user will POST to this URI
                username_path: email    # Key for the username in the JSON body
                password_path: password # Key for the password in the JSON body
                # Using custom handlers for better JSON responses
                success_handler: App\Security\AuthenticationSuccessHandler
                failure_handler: App\Security\AuthenticationFailureHandler

            logout:
                path: /api/logout # The user will send a request to this URI to logout
                # where to redirect after logout
                # target: app_any_route

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Public routes (no authentication required)
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
        - { path: ^/api/forgot-password, roles: PUBLIC_ACCESS }
        - { path: ^/api/reset-password, roles: PUBLIC_ACCESS }
        
        # Admin routes (require ROLE_ADMIN)
        - { path: ^/api/users$, roles: ROLE_ADMIN, methods: [GET] }
        - { path: ^/api/users/[0-9]+$, roles: [ROLE_ADMIN, IS_AUTHENTICATED_FULLY], methods: [DELETE] }
        
        # User routes (require authentication)
        - { path: ^/api/users/me, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/comics, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/tags, roles: IS_AUTHENTICATED_FULLY }
        
        # Secure everything else by default
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            App\Entity\User: # Changed from Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
