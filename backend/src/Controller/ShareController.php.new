<?php

namespace App\Controller;

use App\Entity\Comic;
use App\Entity\ShareToken;
use App\Entity\User;
use App\Repository\ShareTokenRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Email;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\CurrentUser;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use Twig\Environment;
use App\Repository\ComicRepository;
use App\Repository\TagRepository;
use App\Entity\Tag;
use Symfony\Component\String\Slugger\SluggerInterface;
use Psr\Log\LoggerInterface; // For logging cover copy errors

#[Route('/api/share')]
class ShareController extends AbstractController
{
    private string $comicsDirectory;
    private string $frontendUrl;
    private string $publicSharesDirectory;

    public function __construct(string $comicsDirectory, string $frontendUrl)
    {
        $this->comicsDirectory = $comicsDirectory;
        $this->frontendUrl = $frontendUrl;
        // Create a public directory for shared comic covers
        $this->publicSharesDirectory = dirname($comicsDirectory) . '/public/shared';
        
        // Ensure the public shares directory exists
        if (!file_exists($this->publicSharesDirectory)) {
            mkdir($this->publicSharesDirectory, 0775, true);
        }
    }
    
    #[Route('/pending', name: 'app_share_pending', methods: ['GET'])]
    public function getPendingShares(
        ShareTokenRepository $shareTokenRepository,
        #[CurrentUser] ?User $currentUser
    ): JsonResponse {

        if (!$currentUser) {
            return new JsonResponse(['error' => 'Unauthorized'], Response::HTTP_UNAUTHORIZED);
        }
        
        // Find pending shares for the current user's email
        $pendingShares = $shareTokenRepository->findPendingSharesByEmail($currentUser->getEmail());
        
        // Format the response data
        $formattedShares = [];
        foreach ($pendingShares as $share) {
            $comic = $share->getComic();
            $sharedBy = $share->getSharedByUser();
            
            $formattedShares[] = [
                'id' => $share->getId(),
                'token' => $share->getToken(),
                'comic' => [
                    'id' => $comic->getId(),
                    'title' => $comic->getTitle(),
                    'author' => $comic->getAuthor(),
                    'coverImagePath' => $share->getPublicCoverPath() ?: $comic->getCoverImagePath(),
                ],
                'sharedBy' => [
                    'id' => $sharedBy->getId(),
                    'name' => $sharedBy->getName(),
                    'email' => $sharedBy->getEmail(),
                ],
                'createdAt' => $share->getCreatedAt()->format('c'),
                'expiresAt' => $share->getExpiresAt()->format('c'),
            ];
        }
        
        return new JsonResponse(['pendingShares' => $formattedShares]);
    }
    
    #[Route('/refuse/{token}', name: 'app_share_refuse', methods: ['POST'])]
    public function refuseShareAction(
        string $token,
        #[CurrentUser] ?User $currentUser,
        EntityManagerInterface $entityManager,
        ShareTokenRepository $shareTokenRepository,
        LoggerInterface $logger
    ): JsonResponse {
        if (!$currentUser) {
            return new JsonResponse(['error' => 'Unauthorized'], Response::HTTP_UNAUTHORIZED);
        }
        
        $shareToken = $shareTokenRepository->findOneBy(['token' => $token, 'isUsed' => false]);
        
        if (!$shareToken) {
            return new JsonResponse(['error' => 'Share link not found or already used'], Response::HTTP_NOT_FOUND);
        }
        
        if ($shareToken->getExpiresAt() < new \DateTimeImmutable()) {
            return new JsonResponse(['error' => 'Share link expired'], Response::HTTP_GONE);
        }
        
        if ($shareToken->getSharedWithEmail() !== $currentUser->getEmail()) {
            return new JsonResponse(['error' => 'Share link not intended for this account'], Response::HTTP_FORBIDDEN);
        }
        
        try {
            // Mark the share as used
            $shareToken->setIsUsed(true);
            $entityManager->persist($shareToken);
            
            // Clean up the public cover image if it exists
            if ($shareToken->getPublicCoverPath()) {
                $publicCoverPath = $this->publicSharesDirectory . '/' . basename($shareToken->getPublicCoverPath());
                if (file_exists($publicCoverPath)) {
                    @unlink($publicCoverPath);
                }
            }
            
            $entityManager->flush();
            
            return new JsonResponse(['message' => 'Share refused successfully'], Response::HTTP_OK);
        } catch (\Exception $e) {
            $logger->error('Error refusing share: ' . $e->getMessage());
            return new JsonResponse(['error' => 'An error occurred while refusing the share'], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    #[Route('/comic/{comicId}', name: 'app_share_comic', methods: ['POST'])]
    public function shareComicAction(
        Request $request,
        EntityManagerInterface $entityManager,
        MailerInterface $mailer,
        Environment $twig,
        ShareTokenRepository $shareTokenRepository,
        ValidatorInterface $validator,
        int $comicId,
        #[CurrentUser] ?User $currentUser
    ): JsonResponse {
        if (!$currentUser) {
            return new JsonResponse(['error' => 'Unauthorized'], Response::HTTP_UNAUTHORIZED);
        }

        // Get the comic
        $comic = $entityManager->getRepository(Comic::class)->find($comicId);
        if (!$comic) {
            return new JsonResponse(['error' => 'Comic not found'], Response::HTTP_NOT_FOUND);
        }

        // Check if the user owns the comic
        if ($comic->getOwner()->getId() !== $currentUser->getId()) {
            return new JsonResponse(['error' => 'You can only share comics you own'], Response::HTTP_FORBIDDEN);
        }

        // Get the recipient email from the request
        $data = json_decode($request->getContent(), true);
        $recipientEmail = $data['email'] ?? null;

        if (!$recipientEmail) {
            return new JsonResponse(['error' => 'Recipient email is required'], Response::HTTP_BAD_REQUEST);
        }

        // Validate the email
        if (!filter_var($recipientEmail, FILTER_VALIDATE_EMAIL)) {
            return new JsonResponse(['error' => 'Invalid email address'], Response::HTTP_BAD_REQUEST);
        }

        // Rate limiting: Check if the user has sent too many share invitations recently
        $recentSharesCount = $shareTokenRepository->countRecentSharesByUser(
            $currentUser,
            (new \DateTimeImmutable())->modify('-1 hour')
        );

        $maxSharesPerHour = 10; // Adjust as needed
        if ($recentSharesCount >= $maxSharesPerHour) {
            return new JsonResponse(
                ['error' => 'You have sent too many share invitations recently. Please try again later.'],
                Response::HTTP_TOO_MANY_REQUESTS
            );
        }

        try {
            // Create a new ShareToken entity
            $shareToken = new ShareToken($comic, $currentUser, $recipientEmail);

            // Copy the cover image to a public location if it exists
            if ($comic->getCoverImagePath()) {
                $coverPath = $this->comicsDirectory . '/' . $currentUser->getId() . '/' . $comic->getCoverImagePath();
                if (file_exists($coverPath)) {
                    // Create a unique filename for the shared cover
                    $sharedCoverFilename = 'share_' . $shareToken->getToken() . '_' . basename($comic->getCoverImagePath());
                    $sharedCoverPath = $this->publicSharesDirectory . '/' . $sharedCoverFilename;
                    
                    // Copy the cover to the public directory
                    copy($coverPath, $sharedCoverPath);
                    
                    // Store the public path in the token
                    $shareToken->setPublicCoverPath('shared/' . $sharedCoverFilename);
                }
            }

            // Persist the ShareToken entity
            $entityManager->persist($shareToken);
            $entityManager->flush();

            // Generate the share link
            $shareLink = $this->frontendUrl . '/share/accept/' . $shareToken->getToken();

            // Get the user's name and email for the email template
            $userName = $currentUser->getName();
            $userEmail = $currentUser->getEmail();
            $systemFromAddress = 'noreply@comicreader.example.com'; // Use a system email as the sender

            // Render the email template
            $emailBody = $twig->render('emails/share_comic.html.twig', [
                'comic' => $comic,
                'userName' => $userName,
                'shareLink' => $shareLink,
                'expiresAt' => $shareToken->getExpiresAt(),
            ]);

            // Send the email
            $email = (new Email())
                ->from($systemFromAddress)
                ->replyTo($userEmail)
                ->to($recipientEmail)
                ->subject($userName . ' shared a comic with you!')
                ->html($emailBody);

            $mailer->send($email);

            return new JsonResponse([
                'message' => 'Comic shared successfully',
                'shareToken' => $shareToken->getToken(),
            ]);
        } catch (\Exception $e) {
            return new JsonResponse(['error' => 'Failed to share comic: ' . $e->getMessage()], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    #[Route('/accept/{token}', name: 'app_share_accept', methods: ['POST'])]
    public function acceptShareAction(
        string $token,
        #[CurrentUser] ?User $currentUser,
        EntityManagerInterface $entityManager,
        ShareTokenRepository $shareTokenRepository,
        // ComicRepository $comicRepository, // Not directly used, original comic from token
        TagRepository $tagRepository,
        SluggerInterface $slugger,
        LoggerInterface $logger // For logging non-critical errors
    ): JsonResponse {
        if (!$currentUser) {
            return new JsonResponse(['error' => 'Unauthorized'], Response::HTTP_UNAUTHORIZED);
        }

        $shareToken = $shareTokenRepository->findOneBy(['token' => $token]);

        if (!$shareToken) {
            return new JsonResponse(['error' => 'Share link not found'], Response::HTTP_NOT_FOUND);
        }

        if ($shareToken->isIsUsed()) {
            return new JsonResponse(['error' => 'Share link already used'], Response::HTTP_GONE);
        }

        if ($shareToken->getExpiresAt() < new \DateTimeImmutable()) {
            $shareToken->setIsUsed(true);
            $entityManager->persist($shareToken);
            $entityManager->flush();
            return new JsonResponse(['error' => 'Share link expired'], Response::HTTP_GONE);
        }

        if ($shareToken->getSharedWithEmail() !== $currentUser->getEmail()) {
            return new JsonResponse(['error' => 'Share link not intended for this account'], Response::HTTP_FORBIDDEN);
        }

        $entityManager->beginTransaction();

        try {
            $originalComic = $shareToken->getComic();
            if (!$originalComic) { // Should not happen if DB integrity is maintained
                 return new JsonResponse(['error' => 'Original comic not found for this token'], Response::HTTP_INTERNAL_SERVER_ERROR);
            }

            $newComic = new Comic();
            $newComic->setTitle($originalComic->getTitle());
            $newComic->setDescription($originalComic->getDescription());
            $newComic->setAuthor($originalComic->getAuthor());
            $newComic->setPublisher($originalComic->getPublisher());
            $newComic->setPageCount($originalComic->getPageCount());
            $newComic->setOwner($currentUser);
            // Set upload date (creation date) for the new copy
            $newComic->setUploadedAt(new \DateTimeImmutable());
            $newComic->setUpdatedAt(new \DateTimeImmutable());

            // Copy Comic File (CBZ)
            $sharerId = $shareToken->getSharedByUser()->getId();
            $originalComicRelativePath = $originalComic->getFilePath(); // e.g., "comic-file.cbz" or "subfolder/comic-file.cbz" if owner organises them
            
            // Prevent path traversal by removing any directory traversal sequences
            $sanitizedPath = str_replace(['../', '..\\', './'], '', $originalComicRelativePath);
            
            // The full path should be $this->comicsDirectory . '/' . $sharerId . '/' . $originalComic->getFilePath()
            $originalComicPath = $this->comicsDirectory . '/' . $sharerId . '/' . $sanitizedPath;


            $recipientId = $currentUser->getId();
            $recipientComicDir = $this->comicsDirectory . '/' . $recipientId;

            if (!file_exists($recipientComicDir)) {
                if (!mkdir($recipientComicDir, 0775, true)) {
                    throw new \RuntimeException('Failed to create recipient comic directory.');
                }
                // Ensure proper permissions are set
                chmod($recipientComicDir, 0775);
            }

            $originalFilenameWithoutExt = pathinfo($originalComicRelativePath, PATHINFO_FILENAME);
            $extension = pathinfo($originalComicRelativePath, PATHINFO_EXTENSION);
            
            $newSafeFilename = $slugger->slug($originalFilenameWithoutExt)->lower();
            $newComicFilename = $newSafeFilename . '-' . uniqid() . '.' . $extension;
            $newComicPath = $recipientComicDir . '/' . $newComicFilename;

            if (!copy($originalComicPath, $newComicPath)) {
                throw new \RuntimeException('Failed to copy comic file.');
            }
            $newComic->setFilePath($newComicFilename); // Store relative path to recipient's comic dir

            // Persist newComic to get its ID for cover path
            $entityManager->persist($newComic);
            $entityManager->flush(); // Flush here to get the ID

            $newComicId = $newComic->getId();

            // Copy Cover Image
            if ($originalComic->getCoverImagePath()) {
                // originalCoverImagePath is relative to sharer's comic directory, e.g., "covers/comic_id/cover.jpg"
                $originalCoverRelativePath = $originalComic->getCoverImagePath(); 
                // Prevent path traversal by removing any directory traversal sequences
                $sanitizedCoverPath = str_replace(['../', '..\\', './'], '', $originalCoverRelativePath);
                $originalCoverPath = $this->comicsDirectory . '/' . $sharerId . '/' . $sanitizedCoverPath;


                if (file_exists($originalCoverPath)) {
                    $originalCoverFilenameWithoutExt = pathinfo($originalCoverRelativePath, PATHINFO_FILENAME);
                    $newCoverExtension = pathinfo($originalCoverRelativePath, PATHINFO_EXTENSION);

                    $newCoverDir = $recipientComicDir . '/covers/' . $newComicId;
                    if (!file_exists($newCoverDir)) {
                        if (!mkdir($newCoverDir, 0775, true)) {
                            $logger->error("Failed to create cover directory for new comic ID {$newComicId}");
                            // Continue without cover image rather than failing the entire operation
                        } else {
                            chmod($newCoverDir, 0775);
                        }
                    }
                    
                    if (file_exists($newCoverDir)) {
                        $newCoverFilename = $newSafeFilename . '-' . uniqid() . '.' . $newCoverExtension;
                        $newCoverPath = $newCoverDir . '/' . $newCoverFilename;
                        
                        if (copy($originalCoverPath, $newCoverPath)) {
                            // Store the relative path from the user's comic directory
                            $newComic->setCoverImagePath('covers/' . $newComicId . '/' . $newCoverFilename);
                        } else {
                            $logger->error("Failed to copy cover image from {$originalCoverPath} to {$newCoverPath}");
                            // Continue without cover image rather than failing the entire operation
                        }
                    }
                }
            }

            // Copy Tags
            $originalTags = $originalComic->getTags();
            foreach ($originalTags as $originalTag) {
                $tagName = $originalTag->getName();
                
                // Check if the user already has this tag
                $existingTag = $tagRepository->findOneBy([
                    'name' => $tagName,
                    'owner' => $currentUser
                ]);
                
                if (!$existingTag) {
                    // Create a new tag for the user
                    $newTag = new Tag();
                    $newTag->setName($tagName);
                    $newTag->setOwner($currentUser);
                    $entityManager->persist($newTag);
                    $newComic->addTag($newTag);
                } else {
                    // Use the existing tag
                    $newComic->addTag($existingTag);
                }
            }

            // Mark the share token as used
            $shareToken->setIsUsed(true);
            $entityManager->persist($shareToken);
            
            // Clean up the public cover image if it exists
            if ($shareToken->getPublicCoverPath()) {
                $publicCoverPath = $this->publicSharesDirectory . '/' . basename($shareToken->getPublicCoverPath());
                if (file_exists($publicCoverPath)) {
                    @unlink($publicCoverPath);
                }
            }
            
            // Save all changes
            $entityManager->persist($newComic);
            $entityManager->flush();
            $entityManager->commit();
            
            return new JsonResponse([
                'message' => 'Comic accepted successfully',
                'comic' => [
                    'id' => $newComic->getId(),
                    'title' => $newComic->getTitle(),
                    'author' => $newComic->getAuthor(),
                    'coverImagePath' => $newComic->getCoverImagePath(),
                ]
            ]);
        } catch (\Exception $e) {
            $entityManager->rollback();
            $logger->error('Error accepting shared comic: ' . $e->getMessage());
            return new JsonResponse(['error' => 'Failed to accept shared comic: ' . $e->getMessage()], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }
}
