import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Upload, X } from "lucide-react";

const UploadComicForm = () => {
  const { toast } = useToast();
  const navigate = useNavigate();
  const { user } = useAuth();
  
  const [file, setFile] = useState(null);
  const [title, setTitle] = useState("");
  const [author, setAuthor] = useState("");
  const [uploading, setUploading] = useState(false);
  
  const handleFileChange = (e) => {
    if (e.target.files[0]) {
      // Only accept .cbz files
      if (!e.target.files[0].name.toLowerCase().endsWith('.cbz')) {
        toast({
          title: "Invalid file",
          description: "Please upload a .cbz file",
          variant: "destructive"
        });
        return;
      }
      setFile(e.target.files[0]);
    }
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!file || !title) {
      toast({
        title: "Missing information",
        description: "Please provide a title and select a file",
        variant: "destructive"
      });
      return;
    }
    
    setUploading(true);
    console.log('Starting upload process');
    
    try {
      // Create form data
      const formData = new FormData();
      formData.append('file', file);
      formData.append('title', title);
      if (author) formData.append('author', author);
      
      console.log(`Sending to /api/comics with: ${file.name}, ${title}, ${author || 'no author'}`);
      
      // Make the POST request
      const response = await fetch('/api/comics', {
        method: 'POST',
        body: formData,
        credentials: 'include'
      });
      
      console.log(`Response status: ${response.status}`);
      
      if (!response.ok) {
        let errorText = 'Upload failed';
        try {
          const errorData = await response.json();
          errorText = errorData.message || errorText;
          console.log(`Error response: ${JSON.stringify(errorData)}`);
        } catch (e) {
          console.log(`Failed to parse error response: ${e.message}`);
        }
        throw new Error(errorText);
      }
      
      const data = await response.json();
      console.log(`Upload success response: ${JSON.stringify(data)}`);
      
      toast({
        title: "Upload successful",
        description: "Your comic has been uploaded"
      });
      
      // Navigate to the comic page or dashboard
      navigate('/dashboard');
    } catch (error) {
      console.error('Upload error:', error);
      toast({
        title: "Upload failed",
        description: error.message || "Something went wrong",
        variant: "destructive"
      });
    } finally {
      setUploading(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex flex-col items-center">
        <h1 className="text-3xl font-comic mb-6">Upload New Comic</h1>
        
        <Card className="w-full max-w-xl">
          <CardHeader>
            <CardTitle className="text-2xl font-comic">Upload New Comic</CardTitle>
            <CardDescription>Share your favorite comics with the community</CardDescription>
          </CardHeader>
          <CardContent>
            <form id="upload-form" onSubmit={handleSubmit} className="space-y-5">
              <div className="space-y-2">
                <Label htmlFor="comic-file">Comic File (.cbz)</Label>
                <div 
                  className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center cursor-pointer hover:border-gray-400 dark:hover:border-gray-500" 
                  onClick={() => document.getElementById('comic-file').click()}
                >
                  <input 
                    id="comic-file" 
                    type="file" 
                    accept=".cbz" 
                    onChange={handleFileChange} 
                    className="hidden"
                    required
                  />
                  {file ? (
                    <div className="flex items-center justify-center gap-2">
                      <span className="text-sm font-medium">{file.name}</span>
                      <Button 
                        type="button" 
                        variant="ghost" 
                        size="sm" 
                        className="p-0 h-auto" 
                        onClick={(e) => {
                          e.stopPropagation();
                          setFile(null);
                        }}
                      >
                        <X size={16} />
                      </Button>
                    </div>
                  ) : (
                    <div className="flex flex-col items-center">
                      <Upload className="h-10 w-10 text-gray-400 mb-2" />
                      <span className="text-sm font-medium">Drag & drop or click to select a .cbz file</span>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="title">Title</Label>
                <Input 
                  id="title" 
                  value={title} 
                  onChange={(e) => setTitle(e.target.value)} 
                  placeholder="Comic Title"
                  required
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="author">Author (optional)</Label>
                <Input 
                  id="author" 
                  value={author} 
                  onChange={(e) => setAuthor(e.target.value)} 
                  placeholder="Author Name"
                />
              </div>
            </form>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button variant="outline" onClick={() => navigate(-1)}>Cancel</Button>
            <Button 
              type="submit" 
              form="upload-form" 
              disabled={uploading} 
              className="space-x-2"
            >
              {uploading ? "Uploading..." : "Upload Comic"}
              <Upload size={16} />
            </Button>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
};

export default UploadComicForm;
